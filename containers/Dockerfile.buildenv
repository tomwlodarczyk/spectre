# Distributed under the MIT License.
# See LICENSE.txt for details.

# If you change this file please push a new image to DockerHub so that the
# new image is used for testing. Docker must be run as root on your machine,
# so to build a new image run the following as root (e.g. sudo su):
#   cd $SPECTRE_HOME/containers
#   docker build  -t sxscollaboration/spectrebuildenv:latest \
#                 -f ./Dockerfile.buildenv .
# and then to push to DockerHub:
#   docker push sxscollaboration/spectrebuildenv
# If you do not have permission to push to DockerHub please coordinate with
# someone who does. Since changes to this image effect our testing
# infrastructure it is important all changes be carefully reviewed.

FROM ubuntu:18.04

ARG PARALLEL_MAKE_ARG=-j2
ARG DEBIAN_FRONTEND=noninteractive

# Add ubuntu test repo for GCC9
RUN apt-get update -y \
    && apt-get install -y software-properties-common \
    && add-apt-repository ppa:ubuntu-toolchain-r/test

# Install required packages for SpECTRE
RUN apt-get update -y \
    && apt-get install -y gcc-6 g++-6 gfortran-6 \
                          gcc-7 g++-7 gfortran-7 \
                          gcc-8 g++-8 gfortran-8 \
                          gcc-9 g++-9 gfortran-9 \
                          gdb git cmake autoconf \
                          libopenblas-dev liblapack-dev \
                          libhdf5-dev hdf5-tools \
                          libgsl0-dev \
                          clang-5.0 clang-format-5.0 clang-tidy-5.0 \
                          libclang-5.0-dev wget libncurses-dev \
                          lcov cppcheck \
                          libboost-all-dev libssl-dev libbenchmark-dev

# Add clang 4 and 8
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
    && apt-get update -y \
    && apt-get install -y clang-4.0 clang-8

# Update is needed to get libc++ correctly
# Install jemalloc
RUN apt-get update -y \
    && apt-get install -y libc++-dev libc++1 libc++abi-dev \
    && apt-get update -y \
    && apt-get install -y libjemalloc1 libjemalloc-dev

# Install ccache to cache compilations for reduced compile time, and Doxygen
RUN apt-get install -y ccache doxygen

# Install Python packages
RUN apt-get install -y python-pip \
    && pip install autopep8 flake8 \
    && pip install numpy scipy \
    && pip install coverxygen beautifulsoup4 pybtex

# Add ruby gems and install coveralls using gem
RUN apt-get update -y \
    && apt-get install -y rubygems \
    && gem install coveralls-lcov

# Enable bash-completion by installing it and then adding it to the .bashrc file
RUN apt-get update -y \
    && apt-get install -y bash-completion \
    && printf "if [ -f /etc/bash_completion ] && ! shopt -oq posix; then\n\
    . /etc/bash_completion\nfi\n\n" >> /root/.bashrc

# We install dependencies not available through apt manually rather than using
# Spack since Spack ends up building a lot of dependencies from scratch
# that we don't need. Thus, not building the deps with Spack reduces total
# build time of the Docker image.

# Install blaze, brigand, catch2, libsharp, libxsmm, yaml-cpp in /usr/local
RUN wget https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.2.tar.gz -O blaze.tar.gz \
    && tar -xzf blaze.tar.gz \
    && mv blaze-* blaze \
    && mv blaze/blaze /usr/local/include \
    && rm -rf blaze* \
    && git clone https://github.com/edouarda/brigand.git \
    && mv brigand/include/brigand /usr/local/include \
    && rm -rf brigand \
    && wget https://github.com/catchorg/Catch2/releases/download/v2.2.1/catch.hpp -O catch.hpp \
    && mv catch.hpp /usr/local/include \
    && wget https://github.com/Libsharp/libsharp/archive/v1.0.0.tar.gz -O libsharp.tar.gz \
    && tar -xzf libsharp.tar.gz \
    && mv libsharp-* libsharp_build \
    && cd libsharp_build \
    && sed -i 's/march=native/march=x86-64/' configure.ac \
    && autoconf \
    && ./configure --prefix=/usr/local --disable-openmp \
    && make -j4 \
    && mv auto/bin/* /usr/local/bin \
    && mv auto/include/* /usr/local/include \
    && mv auto/lib/* /usr/local/lib \
    && cd ../ \
    && rm -r libsharp* \
    && wget https://github.com/hfp/libxsmm/archive/1.9.tar.gz -O libxsmm.tar.gz \
    && tar -xzf libxsmm.tar.gz \
    && mv libxsmm-* libxsmm \
    && cd libxsmm \
    && make $PARALLEL_MAKE_ARG PREFIX=/usr/local/ install \
    && cd .. \
    && rm -rf libxsmm libxsmm.tar.gz \
    && wget https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.2.tar.gz -O yaml-cpp.tar.gz \
    && tar -xzf yaml-cpp.tar.gz \
    && mv yaml-cpp-* yaml-cpp-build \
    && cd yaml-cpp-build \
    && mkdir build \
    && cd build \
    && cmake -D CMAKE_BUILD_TYPE=Release -D YAML_CPP_BUILD_TESTS=OFF \
             -D YAML_CPP_BUILD_CONTRIB=OFF \
             -D YAML_CPP_BUILD_TOOLS=ON \
             -D CMAKE_INSTALL_PREFIX=/usr/local/ .. \
    && make -j4 \
    && make install \
    && cd ../.. \
    && rm -rf yaml-cpp*

# Install include-what-you-use
# We patch it to allow cyclic includes in boost
WORKDIR /work
RUN wget https://github.com/include-what-you-use/include-what-you-use/archive/clang_5.0.tar.gz \
    && tar -xzf clang_5.0.tar.gz \
    && rm clang_5.0.tar.gz \
    && mkdir /work/include-what-you-use-clang_5.0/build \
    && cd /work/include-what-you-use-clang_5.0/ \
    && sed -i 's^\\\"third_party/^<boost/^' iwyu_include_picker.cc \
    && cd /work/include-what-you-use-clang_5.0/build \
    && cmake -D CMAKE_CXX_COMPILER=clang++-5.0 \
        -D CMAKE_C_COMPILER=clang-5.0 \
        -D IWYU_LLVM_ROOT_PATH=/usr/lib/llvm-5.0 .. \
    && make -j2 \
    && make install \
    && cd /work \
    && rm -rf /work/include-what-you-use-clang_5.0

# Download and build the Charm++ version used by SpECTRE
# We build both Clang and GCC versions of Charm++ so that all our tests can
# use the same build environment.
WORKDIR /work
ARG CHARM_GIT_TAG=v6.8.0
# Charm doesn't support compiling with clang-5 without symbolic links
RUN ln -s $(which clang++-5.0) /usr/local/bin/clang++ \
    && ln -s $(which clang-5.0) /usr/local/bin/clang \
    && ln -s $(which clang-format-5.0) /usr/local/bin/clang-format \
    && ln -s $(which clang-tidy-5.0) /usr/local/bin/clang-tidy
RUN git clone https://github.com/UIUC-PPL/charm \
    && cd /work/charm \
    && git checkout ${CHARM_GIT_TAG} \
    && ./build charm++ multicore-linux64 gcc ${PARALLEL_MAKE_ARG} -g -O0  \
    && ./build charm++ multicore-linux64 clang ${PARALLEL_MAKE_ARG} -g -O0 \
    && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/Charm/v6.8.patch \
    && git apply /work/charm/v6.8.patch \
    && rm /work/charm/v6.8.patch

# - Set the environment variable SPECTRE_CONTAINER so we can check if we are
#   inside a container (0 is true in bash)
# - The singularity containers work better if the locale is set properly
ENV SPECTRE_CONTAINER 0
RUN apt-get update \
    && apt-get install -y locales language-pack-fi language-pack-en \
    && export LANGUAGE=en_US.UTF-8 \
    && export LANG=en_US.UTF-8 \
    && export LC_ALL=en_US.UTF-8 \
    && locale-gen en_US.UTF-8 \
    && dpkg-reconfigure locales

# Install bibtex for Doxygen bibliography management
# We first install the TeXLive infrastructure according to the configuration in
# support/TeXLive/texlive.profile and then use it to install the bibtex package.
RUN mkdir /work/texlive
WORKDIR /work/texlive
RUN wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \
    && tar -xzf install-tl-unx.tar.gz \
    && rm install-tl-unx.tar.gz \
    && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/TeXLive/texlive.profile \
    && install-tl-*/install-tl -profile=texlive.profile \
    && rm -r install-tl-* texlive.profile install-tl.log \
    && echo "export PATH=\$PATH:/work/texlive/bin/x86_64-linux" \
            >> /root/.bashrc \
    && /work/texlive/bin/x86_64-linux/tlmgr install bibtex
WORKDIR /work
